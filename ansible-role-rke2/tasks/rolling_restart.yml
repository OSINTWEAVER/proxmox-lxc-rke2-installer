---
- name: Cordon and Drain the node {{ rke2_node_name }}
  ansible.builtin.shell: |
    set -o pipefail
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml \
    cordon "{{ rke2_node_name }}" && \
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml \
    drain "{{ rke2_node_name }}" --ignore-daemonsets --delete-emptydir-data {{ rke2_drain_additional_args }}
  args:
    executable: /bin/bash
  register: drain
  until:
    - drain.stdout is search('drained')
  retries: 100
  delay: 15
  changed_when: false
  delegate_to: "{{ active_server | default(groups[rke2_servers_group_name].0) }}"
  run_once: true
  when: rke2_drain_node_during_upgrade

- name: Restart RKE2 service on {{ rke2_node_name }}
  ansible.builtin.service:
    name: "{{ rke2_service_name }}"
    state: restarted
  register: service_restart_result
  retries: 3
  delay: 10
  until: service_restart_result is not failed
  notify: "Service (re)started"

- name: Verify RKE2 service restart success (LXC compatibility)
  ansible.builtin.shell: |
    for i in {1..30}; do
      if systemctl is-active {{ rke2_service_name }} >/dev/null 2>&1; then
        echo "Service {{ rke2_service_name }} restarted successfully"
        exit 0
      fi
      echo "Waiting for {{ rke2_service_name }} restart... attempt $i/30"
      sleep 2
    done
    echo "Service {{ rke2_service_name }} failed to restart properly"
    systemctl status {{ rke2_service_name }} --no-pager
    exit 1
  register: restart_verify
  changed_when: false

- name: Wait for all nodes to be ready again
  ansible.builtin.shell: |
    set -o pipefail
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes | grep " Ready" | wc -l
  args:
    executable: /bin/bash
  changed_when: false
  register: all_ready_nodes
  until:
    - groups[rke2_cluster_group_name] | length == all_ready_nodes.stdout | int
  retries: 100
  delay: 15
  delegate_to: "{{ active_server | default(groups[rke2_servers_group_name].0) }}"
  run_once: true

- name: Uncordon the node {{ rke2_node_name }}
  ansible.builtin.shell: |
    set -o pipefail
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml \
    uncordon "{{ rke2_node_name }}"
  args:
    executable: /bin/bash
  changed_when: false
  delegate_to: "{{ active_server | default(groups[rke2_servers_group_name].0) }}"
  run_once: true
  when: rke2_drain_node_during_upgrade

- name: Wait for all pods to be ready again
  ansible.builtin.shell: |
    set -o pipefail
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get pods -A --field-selector=status.phase!=Running,status.phase!=Succeeded --ignore-not-found | wc -l
  args:
    executable: /bin/bash
  changed_when: false
  register: all_pods_ready
  until:
    '"0" in all_pods_ready.stdout'
  retries: 100
  delay: 15
  delegate_to: "{{ active_server | default(groups[rke2_servers_group_name].0) }}"
  run_once: true
  when: rke2_wait_for_all_pods_to_be_ready

- name: Wait for all pods to pass readiness checks
  ansible.builtin.shell: |
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml wait {{ rke2_wait_for_all_pods_to_be_healthy_args }}
  args:
    executable: /bin/bash
  changed_when: false
  retries: 100
  delay: 15
  delegate_to: "{{ active_server | default(groups[rke2_servers_group_name].0) }}"
  run_once: true
  when: rke2_wait_for_all_pods_to_be_healthy
