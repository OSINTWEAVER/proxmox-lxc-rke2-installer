---
# ===== RANCHER INSTALLATION =====
# Install Rancher management UI following official documentation
# https://ranchermanager.docs.rancher.com/getting-started/installation-and-upgrade/install-upgrade-on-a-kubernetes-cluster

- name: Wait for RKE2 cluster to be fully ready before installing Rancher
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    # Wait for all system pods to be ready
    {{ rke2_data_path }}/bin/kubectl wait --for=condition=ready pod -l k8s-app=kube-dns -n kube-system --timeout=300s
    {{ rke2_data_path }}/bin/kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=traefik -n kube-system --timeout=300s
    # Verify cluster is responsive
    {{ rke2_data_path }}/bin/kubectl get nodes --no-headers | wc -l
  register: cluster_readiness_check
  until: cluster_readiness_check.rc == 0
  retries: 10
  delay: 30
  args:
    executable: /bin/bash

- name: Add cert-manager Helm repository
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    /usr/local/bin/helm repo add jetstack https://charts.jetstack.io
    /usr/local/bin/helm repo update
  args:
    executable: /bin/bash
  register: cert_manager_repo_result
  retries: 3
  delay: 10
  until: cert_manager_repo_result.rc == 0

- name: Install cert-manager with optimized settings for LXC
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    /usr/local/bin/helm upgrade --install cert-manager jetstack/cert-manager \
      --namespace cert-manager \
      --create-namespace \
      --version v1.15.3 \
      --set crds.enabled=true \
      --set prometheus.enabled=false \
      --set resources.requests.cpu=50m \
      --set resources.requests.memory=64Mi \
      --set resources.limits.cpu=200m \
      --set resources.limits.memory=256Mi \
      --set webhook.resources.requests.cpu=10m \
      --set webhook.resources.requests.memory=32Mi \
      --set webhook.resources.limits.cpu=50m \
      --set webhook.resources.limits.memory=128Mi \
      --set cainjector.resources.requests.cpu=10m \
      --set cainjector.resources.requests.memory=64Mi \
      --set cainjector.resources.limits.cpu=100m \
      --set cainjector.resources.limits.memory=256Mi \
      --timeout=300s \
      --wait
  args:
    executable: /bin/bash
  register: cert_manager_install
  retries: 2
  delay: 30
  until: cert_manager_install.rc == 0

- name: Verify cert-manager installation
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    echo "=== cert-manager pods status ==="
    {{ rke2_data_path }}/bin/kubectl get pods -n cert-manager
    echo ""
    echo "=== Waiting for cert-manager pods to be ready ==="
    {{ rke2_data_path }}/bin/kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=cert-manager -n cert-manager --timeout=180s
    {{ rke2_data_path }}/bin/kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=cainjector -n cert-manager --timeout=180s
    {{ rke2_data_path }}/bin/kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=webhook -n cert-manager --timeout=180s
    echo "cert-manager is ready!"
  args:
    executable: /bin/bash

- name: Add Rancher Helm repository
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    /usr/local/bin/helm repo add rancher-stable https://releases.rancher.com/server-charts/stable
    /usr/local/bin/helm repo update
  args:
    executable: /bin/bash
  register: rancher_repo_result
  retries: 3
  delay: 10
  until: rancher_repo_result.rc == 0

- name: Create cattle-system namespace for Rancher
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    {{ rke2_data_path }}/bin/kubectl create namespace cattle-system --dry-run=client -o yaml | {{ rke2_data_path }}/bin/kubectl apply -f -
  args:
    executable: /bin/bash

- name: Check for any existing Rancher Helm release (including failed ones)
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    /usr/local/bin/helm list -n cattle-system -a | grep "^rancher\s" || echo "No rancher release found"
  args:
    executable: /bin/bash
  register: rancher_release_check
  failed_when: false
  changed_when: false

- name: Comprehensive Rancher cleanup (force remove all traces)
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    echo "=== Starting comprehensive Rancher cleanup ==="

    # 1. Force uninstall Helm release (ignore errors)
    echo "1. Force uninstalling Helm release..."
    /usr/local/bin/helm uninstall rancher -n cattle-system --timeout=60s --ignore-not-found || true
    sleep 5

    # 2. Clean up namespace if it exists and is stuck
    echo "2. Checking cattle-system namespace..."
    if kubectl get namespace cattle-system >/dev/null 2>&1; then
      echo "   Namespace exists, cleaning up resources..."

      # Delete all Rancher-related resources
      kubectl delete deployment -n cattle-system --all --timeout=30s --ignore-not-found=true || true
      kubectl delete service -n cattle-system --all --timeout=30s --ignore-not-found=true || true
      kubectl delete ingress -n cattle-system --all --timeout=30s --ignore-not-found=true || true
      kubectl delete configmap -n cattle-system --all --timeout=30s --ignore-not-found=true || true
      kubectl delete secret -n cattle-system --all --timeout=30s --ignore-not-found=true || true
      kubectl delete job -n cattle-system --all --timeout=30s --ignore-not-found=true || true
      kubectl delete pvc -n cattle-system --all --timeout=30s --ignore-not-found=true || true
      kubectl delete pv -n cattle-system --all --timeout=30s --ignore-not-found=true || true

      # Force delete any stuck pods
      kubectl delete pods -n cattle-system --all --force --grace-period=0 --timeout=30s || true

      sleep 10
    else
      echo "   Namespace cattle-system does not exist"
    fi

    # 3. Clean up any remaining cluster-scoped resources
    echo "3. Cleaning up cluster-scoped resources..."
    kubectl delete clusterrolebinding --all --ignore-not-found=true | grep rancher || true
    kubectl delete clusterrole --all --ignore-not-found=true | grep rancher || true

    # 4. Reset Helm release history
    echo "4. Resetting Helm release history..."
    /usr/local/bin/helm reset --force || true

    # 5. Wait for cleanup to complete
    echo "5. Waiting for cleanup to complete..."
    sleep 15

    echo "=== Rancher cleanup completed ==="
  args:
    executable: /bin/bash
  register: comprehensive_cleanup
  when: rancher_release_check.stdout is not search("No rancher release found")
  failed_when: false

- name: Verify cleanup was successful
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    echo "=== Verifying cleanup ==="

    # Check if Helm release is gone
    if /usr/local/bin/helm list -n cattle-system -a | grep "^rancher\s" >/dev/null 2>&1; then
      echo "WARNING: Helm release still exists!"
      exit 1
    else
      echo "‚úì Helm release successfully removed"
    fi

    # Check if namespace is clean
    if kubectl get namespace cattle-system >/dev/null 2>&1; then
      rancher_pods=$(kubectl get pods -n cattle-system -l app=rancher --no-headers 2>/dev/null | wc -l)
      if [ "$rancher_pods" -gt 0 ]; then
        echo "WARNING: Rancher pods still exist in cattle-system namespace!"
        exit 1
      else
        echo "‚úì cattle-system namespace is clean"
      fi
    else
      echo "‚úì cattle-system namespace does not exist"
    fi

    echo "=== Cleanup verification completed ==="
  args:
    executable: /bin/bash
  register: cleanup_verification
  when: rancher_release_check.stdout is not search("No rancher release found")
  failed_when: false

- name: Install Rancher following official documentation (compatible with current K8s version)
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    echo "=== Starting Rancher installation ==="

    # Verify no conflicting release exists
    if /usr/local/bin/helm list -n cattle-system -a | grep "^rancher\s" >/dev/null 2>&1; then
      echo "ERROR: Rancher release still exists! Cleanup may have failed."
      exit 1
    fi

    echo "Installing Rancher with Helm..."
    /usr/local/bin/helm install rancher rancher-stable/rancher \
      --namespace cattle-system \
      --create-namespace \
      --set hostname="{{ rancher_hostname }}" \
      --set bootstrapPassword="{{ rancher_bootstrap_password }}" \
      --set replicas=1 \
      --set ingress.tls.source=rancher \
      --set resources.requests.cpu=250m \
      --set resources.requests.memory=512Mi \
      --set resources.limits.cpu=500m \
      --set resources.limits.memory=1Gi \
      --set extraEnv[0].name=CATTLE_SYSTEM_DEFAULT_REGISTRY \
      --set extraEnv[0].value="" \
      --set useBundledSystemChart=true \
      --timeout=600s \
      --wait \
      --debug
  args:
    executable: /bin/bash
  register: rancher_install_result
  retries: 3
  delay: 30
  until: rancher_install_result.rc == 0
  failed_when: false

- name: Show Rancher installation failure details and recovery options
  ansible.builtin.debug:
    msg: |
      ‚ùå Rancher installation failed after retries!
      Error: {{ rancher_install_result.stderr | default('No error message') }}
      Command output: {{ rancher_install_result.stdout | default('No output') }}

      üîß Recovery Options:
      1. Manual cleanup and retry:
         helm uninstall rancher -n cattle-system --ignore-not-found
         kubectl delete namespace cattle-system --ignore-not-found
         # Then re-run the playbook

      2. Check cluster resources:
         kubectl get pods -n cattle-system
         kubectl get ingress -n cattle-system
         helm list -n cattle-system

      3. Check cert-manager status:
         kubectl get pods -n cert-manager
         kubectl logs -n cert-manager deployment/cert-manager

      4. Force reinstall (if needed):
         ansible-playbook -i inventories/hosts-your-cluster.ini playbooks/troubleshooting/install_rancher_only.yml
  when: rancher_install_result.failed | default(false)

- name: Verify Rancher installation success
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    echo "=== Verifying Rancher installation ==="

    # Check if Helm release exists and is deployed
    if /usr/local/bin/helm list -n cattle-system | grep "^rancher\s" | grep "deployed" >/dev/null 2>&1; then
      echo "‚úì Helm release 'rancher' is deployed"
    else
      echo "‚úó Helm release 'rancher' is not properly deployed"
      exit 1
    fi

    # Check if Rancher pod is running
    rancher_pod=$(kubectl get pods -n cattle-system -l app=rancher -o jsonpath='{.items[0].status.phase}' 2>/dev/null || echo "NotFound")
    if [ "$rancher_pod" = "Running" ]; then
      echo "‚úì Rancher pod is running"
    else
      echo "‚úó Rancher pod is not running (status: $rancher_pod)"
      exit 1
    fi

    # Check if ingress is created
    if kubectl get ingress -n cattle-system rancher >/dev/null 2>&1; then
      echo "‚úì Rancher ingress is created"
    else
      echo "‚úó Rancher ingress is not created"
      exit 1
    fi

    echo "=== Rancher installation verification completed ==="
  args:
    executable: /bin/bash
  register: rancher_verification
  when: not (rancher_install_result.failed | default(false))
  failed_when: false

- name: Upgrade Rancher if already installed with different configuration
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    echo "=== Upgrading existing Rancher installation ==="

    # Verify the release exists and is healthy
    if ! /usr/local/bin/helm list -n cattle-system | grep "^rancher\s" | grep "deployed" >/dev/null 2>&1; then
      echo "ERROR: No healthy Rancher release found for upgrade!"
      exit 1
    fi

    echo "Upgrading Rancher with Helm..."
    /usr/local/bin/helm upgrade rancher rancher-stable/rancher \
      --namespace cattle-system \
      --set hostname="{{ rancher_hostname }}" \
      --set bootstrapPassword="{{ rancher_bootstrap_password }}" \
      --set replicas=1 \
      --set ingress.tls.source=rancher \
      --set resources.requests.cpu=250m \
      --set resources.requests.memory=512Mi \
      --set resources.limits.cpu=500m \
      --set resources.limits.memory=1Gi \
      --set extraEnv[0].name=CATTLE_SYSTEM_DEFAULT_REGISTRY \
      --set extraEnv[0].value="" \
      --set useBundledSystemChart=true \
      --timeout=600s \
      --wait \
      --debug
  args:
    executable: /bin/bash
  register: rancher_upgrade_result
  retries: 3
  delay: 30
  until: rancher_upgrade_result.rc == 0
  when: rancher_release_check.stdout is search("rancher")
  failed_when: false

- name: Show Rancher upgrade failure details and recovery options
  ansible.builtin.debug:
    msg: |
      ‚ùå Rancher upgrade failed after retries!
      Error: {{ rancher_upgrade_result.stderr | default('No error message') }}
      Command output: {{ rancher_upgrade_result.stdout | default('No output') }}

      üîß Recovery Options:
      1. Check current release status:
         helm status rancher -n cattle-system
         helm get values rancher -n cattle-system

      2. Force upgrade:
         helm upgrade rancher rancher-stable/rancher -n cattle-system --force --debug

      3. Complete reinstall (nuclear option):
         helm uninstall rancher -n cattle-system --ignore-not-found
         kubectl delete namespace cattle-system --ignore-not-found
         # Then re-run the playbook

      4. Check cluster health:
         kubectl get pods -n cattle-system
         kubectl get events -n cattle-system --sort-by=.metadata.creationTimestamp
  when: rancher_upgrade_result.failed | default(false)

- name: Display Rancher installation status
  ansible.builtin.debug:
    msg: |
      üéØ Rancher Installation Status:
      {% if rancher_release_check.stdout is not search("rancher") %}
      - Action: Fresh installation completed
      - Status: {{ '‚úÖ Success' if not (rancher_install_result.failed | default(false)) else '‚ùå Failed' }}
      {% else %}
      - Action: Existing installation upgraded
      - Status: {{ '‚úÖ Success' if not (rancher_upgrade_result.failed | default(false)) else '‚ùå Failed' }}
      {% endif %}
      - Hostname: {{ rancher_hostname }}
      - Namespace: cattle-system
      - Verification: {{ '‚úÖ Passed' if not (rancher_verification.failed | default(false)) else '‚ùå Failed' }}

      {% if rancher_install_result.failed | default(false) or rancher_upgrade_result.failed | default(false) %}
      üö® Installation Issues Detected - Check logs above for details
      {% endif %}

- name: Wait for Rancher deployment to be ready
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    {{ rke2_data_path }}/bin/kubectl -n cattle-system rollout status deploy/rancher --timeout=600s
  args:
    executable: /bin/bash

- name: Get comprehensive Rancher deployment status
  ansible.builtin.shell: |
    export KUBECONFIG=/etc/rancher/rke2/rke2.yaml
    echo "=== Rancher Deployment Status ==="
    {{ rke2_data_path }}/bin/kubectl get deployment -n cattle-system rancher -o wide
    echo ""
    echo "=== Rancher Pods ==="
    {{ rke2_data_path }}/bin/kubectl get pods -n cattle-system -l app=rancher -o wide
    echo ""
    echo "=== Rancher Pod Descriptions ==="
    {{ rke2_data_path }}/bin/kubectl describe pods -n cattle-system -l app=rancher
    echo ""
    echo "=== Rancher Ingress ==="
    {{ rke2_data_path }}/bin/kubectl get ingress -n cattle-system rancher -o wide
    echo ""
    echo "=== Rancher Service ==="
    {{ rke2_data_path }}/bin/kubectl get svc -n cattle-system rancher -o wide
    echo ""
    echo "=== cert-manager Status ==="
    {{ rke2_data_path }}/bin/kubectl get pods -n cert-manager -o wide
    echo ""
    echo "=== All cattle-system resources ==="
    {{ rke2_data_path }}/bin/kubectl get all -n cattle-system
    echo ""
    echo "=== Traefik Ingress Controller Status ==="
    {{ rke2_data_path }}/bin/kubectl get pods -n kube-system -l app.kubernetes.io/name=traefik -o wide
  args:
    executable: /bin/bash
  register: rancher_status

- name: Display Rancher access information
  ansible.builtin.debug:
    msg: |
      ========================================
      üéâ RANCHER INSTALLATION COMPLETE! üéâ
      ========================================
      
      Rancher UI Access:
      üåê URL: https://{{ rancher_hostname }}
      üë§ Username: admin
      üîë Bootstrap Password: {{ rancher_bootstrap_password }}
      
      üìù Next Steps:
      1. Add {{ rancher_hostname }} to your DNS or hosts file pointing to {{ rke2_api_ip }}
      2. Access Rancher UI at https://{{ rancher_hostname }}
      3. Login with username 'admin' and the bootstrap password
      4. Follow the setup wizard to complete configuration
      
      ‚ö†Ô∏è  IMPORTANT SECURITY NOTES:
      - Change the bootstrap password after first login
      - Configure proper SSL certificates for production use
      - The current setup uses Rancher-generated self-signed certificates
      
      üîß Troubleshooting:
      - Check pod status: kubectl get pods -n cattle-system
      - Check ingress: kubectl get ingress -n cattle-system
      - View logs: kubectl logs -n cattle-system deployment/rancher
      
      {{ rancher_status.stdout }}

- name: Create Rancher access info file
  ansible.builtin.copy:
    content: |
      # Rancher Management Console Access
      
      ## Quick Access
      
      **Rancher UI**: https://{{ rancher_hostname }}
      **Username**: admin
      **Bootstrap Password**: {{ rancher_bootstrap_password }}
      
      ## DNS Configuration Required
      
      Add the following to your DNS or hosts file:
      ```
      {{ rke2_api_ip }}  {{ rancher_hostname }}
      ```
      
      ### Windows hosts file:
      `C:\Windows\System32\drivers\etc\hosts`
      
      ### Linux/macOS hosts file:
      `/etc/hosts`
      
      ## First Login Steps
      
      1. Browse to https://{{ rancher_hostname }}
      2. Accept the self-signed certificate warning
      3. Login with:
         - Username: `admin`
         - Password: `{{ rancher_bootstrap_password }}`
      4. Follow the setup wizard to:
         - Set a new secure password
         - Configure server URL
         - Accept license agreement
      
      ## Rancher Features Available
      
      - **Cluster Management**: Import and manage existing Kubernetes clusters
      - **Project/Namespace Management**: Organize resources with projects
      - **Application Catalog**: Deploy apps from Helm charts
      - **User Management**: RBAC, authentication providers
      - **Monitoring & Logging**: Built-in Prometheus and Grafana
      - **Backup & Restore**: Cluster backup solutions
      - **Service Mesh**: Istio integration
      - **CI/CD**: Fleet GitOps deployments
      
      ## CLI Access
      
      You can also manage Rancher via kubectl:
      ```bash
      # Check Rancher pods
      kubectl get pods -n cattle-system
      
      # Check Rancher services
      kubectl get svc -n cattle-system
      
      # View Rancher logs
      kubectl logs -n cattle-system deployment/rancher
      
      # Scale Rancher (if needed)
      kubectl scale -n cattle-system deployment/rancher --replicas=1
      ```
      
      ## Security Notes
      
      - **Change default password immediately after first login**
      - **Configure proper SSL certificates for production**
      - **Enable MFA for admin users**
      - **Regularly update Rancher to latest version**
      - **Review and configure network policies**
      
      ## Troubleshooting
      
      ### Common Issues:
      1. **Can't access Rancher UI**:
         - Check DNS/hosts file configuration
         - Verify {{ rancher_hostname }} resolves to {{ rke2_api_ip }}
         - Check ingress controller is running
      
      2. **SSL Certificate warnings**:
         - Normal for self-signed certificates
         - Configure proper certificates for production
      
      3. **Rancher pods not starting**:
         - Check node resources (CPU/memory)
         - Review pod logs: `kubectl logs -n cattle-system deployment/rancher`
         - Check persistent volume availability
      
      ### Support Commands:
      ```bash
      # Full Rancher status
      kubectl get all -n cattle-system
      
      # Rancher configuration
      kubectl get cm -n cattle-system
      
      # Rancher secrets
      kubectl get secrets -n cattle-system
      
      # Ingress controller status
      kubectl get pods -n kube-system -l app.kubernetes.io/name=traefik
      ```
    dest: "{{ playbook_dir | default('/tmp') }}/../rancher-access-info.md"
    mode: '0644'
  delegate_to: localhost
  become: false
