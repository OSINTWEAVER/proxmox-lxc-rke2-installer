---
- name: Completely remove RDMA setup and fix networking issues
  hosts: proxmox_hosts
  become: true
  gather_facts: true

  tasks:
    - name: Remove RDMA rxe0 link that's interfering with networking
      ansible.builtin.shell: |
        # Remove the rxe0 RDMA link that might be interfering
        rdma link delete rxe0 || echo "rxe0 link not found or already removed"
        echo "RDMA rxe0 link removal attempted"
      args:
        executable: /bin/bash
      register: rdma_removal_result
      failed_when: false

    - name: Display RDMA removal results
      ansible.builtin.debug:
        msg: "{{ rdma_removal_result.stdout }}"

    - name: Remove RDMA kernel modules
      ansible.builtin.shell: |
        echo "Removing RDMA modules that might interfere with networking"
        rmmod rdma_rxe || echo "rdma_rxe module not loaded"
        rmmod ib_uverbs || echo "ib_uverbs module not loaded"  
        rmmod rdma_cm || echo "rdma_cm module not loaded"
        echo "RDMA modules removal attempted"
      args:
        executable: /bin/bash
      register: module_removal_result
      failed_when: false

    - name: Display module removal results
      ansible.builtin.debug:
        msg: "{{ module_removal_result.stdout }}"

    - name: Remove RDMA modules from /etc/modules to prevent auto-loading
      ansible.builtin.lineinfile:
        path: /etc/modules
        line: "{{ item }}"
        state: absent
      loop:
        - rdma_cm
        - ib_uverbs
        - rdma_rxe
      register: modules_cleanup

    - name: Remove RDMA udev rules file
      ansible.builtin.file:
        path: /etc/udev/rules.d/40-rdma.rules
        state: absent
      register: udev_rules_removal

    - name: Display udev rules removal status
      ansible.builtin.debug:
        msg: "RDMA udev rules file removed: {{ 'Yes' if udev_rules_removal.changed else 'File not found' }}"

    - name: Reload udev rules after RDMA removal
      ansible.builtin.shell: |
        udevadm control --reload-rules
        udevadm trigger
        echo "udev rules reloaded after RDMA cleanup"
      args:
        executable: /bin/bash
      register: udev_reload_result

    - name: Display udev reload results
      ansible.builtin.debug:
        msg: "{{ udev_reload_result.stdout }}"

    - name: Uninstall RDMA core packages
      ansible.builtin.apt:
        name: rdma-core
        state: absent
        purge: true
      register: rdma_uninstall

    - name: Display RDMA package removal results
      ansible.builtin.debug:
        msg: "RDMA core package removal: {{ 'Successful' if rdma_uninstall.changed else 'Package not found or already removed' }}"

    - name: Clean up any remaining RDMA configuration files
      ansible.builtin.shell: |
        # Remove any remaining RDMA configuration
        rm -rf /etc/rdma/ || echo "No /etc/rdma/ directory found"
        rm -rf /var/lib/rdma/ || echo "No /var/lib/rdma/ directory found"
        echo "RDMA configuration cleanup completed"
      args:
        executable: /bin/bash
      register: rdma_config_cleanup

    - name: Display configuration cleanup results
      ansible.builtin.debug:
        msg: "{{ rdma_config_cleanup.stdout }}"

    - name: Check current network interfaces
      ansible.builtin.shell: |
        echo "=== Current Network Interfaces ==="
        ip link show
        echo "=== RDMA Links (should be empty) ==="
        rdma link show || echo "No RDMA links found (good!)"
        echo "=== Bond0 Status ==="
        cat /proc/net/bonding/bond0 || echo "Bond0 not found"
      args:
        executable: /bin/bash
      register: network_status
      failed_when: false

    - name: Display current network status
      ansible.builtin.debug:
        msg: "{{ network_status.stdout }}"

    - name: Restart networking services to clear any RDMA interference
      ansible.builtin.shell: |
        # Restart networking to clear any RDMA interference
        systemctl restart networking || true
        systemctl restart systemd-networkd || true
        # Bring bond0 down and up to reset it
        ip link set bond0 down || true
        sleep 2
        ip link set bond0 up || true
        echo "Network services restarted"
      args:
        executable: /bin/bash
      register: network_restart_result

    - name: Display network restart results
      ansible.builtin.debug:
        msg: "{{ network_restart_result.stdout }}"

    - name: Wait for network to stabilize
      ansible.builtin.pause:
        seconds: 10

    - name: Test connectivity after RDMA removal
      ansible.builtin.shell: |
        echo "=== Testing Network Connectivity After RDMA Removal ==="
        echo "--- Ping test to internet ---"
        ping -c 3 8.8.8.8 || echo "Internet connectivity failed"
        echo "--- Network interface status ---"
        ip addr show bond0 || echo "Bond0 interface check failed"
        echo "--- Routing table ---"
        ip route show
        echo "--- Verify no RDMA modules loaded ---"
        lsmod | grep -E "rdma_cm|ib_uverbs|rdma_rxe" || echo "No RDMA modules loaded (good!)"
      args:
        executable: /bin/bash
      register: connectivity_test
      failed_when: false

    - name: Display connectivity test results
      ansible.builtin.debug:
        msg: "{{ connectivity_test.stdout }}"

    - name: Final network status check
      ansible.builtin.shell: |
        echo "=== Final Network Status Check ==="
        ip link show | grep -E "(bond0|UP|DOWN)"
        echo "--- Active connections ---"
        ss -tuln | head -10
      args:
        executable: /bin/bash
      register: final_status
      failed_when: false

    - name: Display final status
      ansible.builtin.debug:
        msg: "{{ final_status.stdout }}"

    - name: Complete RDMA removal summary
      ansible.builtin.debug:
        msg: |
          Complete RDMA removal completed for {{ inventory_hostname }}:
          ✓ Removed RDMA rxe0 link
          ✓ Removed RDMA kernel modules
          ✓ Removed RDMA modules from /etc/modules
          ✓ Deleted /etc/udev/rules.d/40-rdma.rules
          ✓ Reloaded udev rules
          ✓ Uninstalled rdma-core package
          ✓ Cleaned up RDMA configuration files
          ✓ Restarted networking services
          ✓ Tested connectivity
          
          Your system should now be completely clean of RDMA components!
