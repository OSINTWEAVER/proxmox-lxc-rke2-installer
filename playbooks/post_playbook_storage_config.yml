---
- name: Configure local-path storage to use /mnt/data and test persistent volumes
  hosts: rke2_servers:rke2_agents
  become: true
  gather_facts: true
  vars:
    admin_user: "{{ cluster_admin_user | default('adm4n') }}"
    storage_path: "/mnt/data"

  tasks:
    # ===== ENSURE /mnt/data EXISTS ON ALL NODES =====
    
    - name: Create /mnt/data directory on all nodes
      ansible.builtin.file:
        path: "{{ storage_path }}"
        state: directory
        mode: '0755'
        owner: root
        group: root

    - name: Set proper permissions for local-path storage
      ansible.builtin.file:
        path: "{{ storage_path }}"
        state: directory
        mode: '0777'  # Local-path provisioner needs write access
        owner: root
        group: root

    # ===== CONFIGURE LOCAL-PATH-PROVISIONER =====
    
    - name: Check current local-path-provisioner configuration
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /var/lib/rancher/rke2/bin/kubectl get configmap local-path-config -n local-path-storage -o yaml
      become_user: "{{ admin_user }}"
      register: current_config
      run_once: true
      changed_when: false

    - name: Display current local-path configuration
      ansible.builtin.debug:
        msg: "Current local-path config: {{ current_config.stdout }}"
      run_once: true

    - name: Create temp ConfigMap YAML file with proper escaping
      ansible.builtin.copy:
        dest: /tmp/local-path-config.yaml
        content: |
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: local-path-config
            namespace: local-path-storage
          data:
            config.json: |-
              {
                "nodePathMap": [
                  {
                    "node": "DEFAULT_PATH_FOR_NON_LISTED_NODES",
                    "paths": ["{{ storage_path }}"]
                  }
                ]
              }
            setup: |-
              #!/bin/sh
              set -eu
              mkdir -m 0777 -p "$VOL_DIR"
              chmod 777 "$VOL_DIR"
            teardown: |-
              #!/bin/sh
              set -eu
              if [ -d "$VOL_DIR" ]; then
                rm -rf "$VOL_DIR"
              fi
            helperPod.yaml: |-
              apiVersion: v1
              kind: Pod
              metadata:
                name: helper-pod
              spec:
                restartPolicy: Never
                nodeSelector:
                  kubernetes.io/os: linux
                tolerations:
                - operator: Exists
                containers:
                - name: helper-pod
                  image: rancher/mirrored-library-busybox:1.36.1
                  imagePullPolicy: IfNotPresent
                  securityContext:
                    runAsUser: 0
                    runAsGroup: 0
                    fsGroup: 0
                  command:
                  - /bin/sh
                  - -c
                  - |
                    set -e
                    echo "Creating volume directory: $VOL_DIR"
                    mkdir -m 0777 -p "$VOL_DIR"
                    chmod 777 "$VOL_DIR"
                    echo "Volume directory created successfully"
                    ls -la "$(dirname "$VOL_DIR")"
      become_user: "{{ admin_user }}"
      run_once: true

    - name: Apply local-path-provisioner ConfigMap
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /var/lib/rancher/rke2/bin/kubectl delete configmap local-path-config -n local-path-storage --ignore-not-found=true
        /var/lib/rancher/rke2/bin/kubectl apply -f /tmp/local-path-config.yaml
      become_user: "{{ admin_user }}"
      run_once: true

    - name: Restart local-path-provisioner to pick up new config
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /var/lib/rancher/rke2/bin/kubectl rollout restart deployment local-path-provisioner -n local-path-storage
        /var/lib/rancher/rke2/bin/kubectl rollout status deployment local-path-provisioner -n local-path-storage --timeout=120s
      become_user: "{{ admin_user }}"
      run_once: true

    # ===== TEST PERSISTENT VOLUME CLAIMS =====
    
    - name: Create test namespace
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /var/lib/rancher/rke2/bin/kubectl create namespace storage-test --dry-run=client -o yaml | /var/lib/rancher/rke2/bin/kubectl apply -f -
      become_user: "{{ admin_user }}"
      run_once: true

    - name: Create test PVC
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        cat <<EOF | /var/lib/rancher/rke2/bin/kubectl apply -f -
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: test-pvc
          namespace: storage-test
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: local-path
          resources:
            requests:
              storage: 1Gi
        EOF
        
        # Wait for PVC to be bound
        echo "Waiting for PVC to be bound..."
        /var/lib/rancher/rke2/bin/kubectl wait --for=condition=Bound pvc test-pvc -n storage-test --timeout=60s
        
        # Show PVC status
        /var/lib/rancher/rke2/bin/kubectl get pvc test-pvc -n storage-test -o wide
        
        # Show PV details
        PV_NAME=$(/var/lib/rancher/rke2/bin/kubectl get pvc test-pvc -n storage-test -o jsonpath='{.spec.volumeName}')
        echo "Associated PV: $PV_NAME"
        /var/lib/rancher/rke2/bin/kubectl get pv "$PV_NAME" -o wide
      become_user: "{{ admin_user }}"
      run_once: true

    - name: Create test pod that uses the PVC
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        cat <<EOF | /var/lib/rancher/rke2/bin/kubectl apply -f -
        apiVersion: v1
        kind: Pod
        metadata:
          name: test-storage-pod
          namespace: storage-test
        spec:
          containers:
          - name: test-container
            image: rancher/mirrored-library-busybox:1.36.1
            command: ["/bin/sh"]
            args: ["-c", "echo 'Storage test successful!' > /mnt/test-data/test-file.txt && sleep 30 && cat /mnt/test-data/test-file.txt && sleep 3600"]
            volumeMounts:
            - name: test-storage
              mountPath: /mnt/test-data
          volumes:
          - name: test-storage
            persistentVolumeClaim:
              claimName: test-pvc
          restartPolicy: Never
        EOF
      become_user: "{{ admin_user }}"
      run_once: true

    - name: Wait for test pod to be ready
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /var/lib/rancher/rke2/bin/kubectl wait --for=condition=ready pod test-storage-pod -n storage-test --timeout=120s
      become_user: "{{ admin_user }}"
      run_once: true

    - name: Check test pod logs
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        sleep 10
        /var/lib/rancher/rke2/bin/kubectl logs test-storage-pod -n storage-test
      become_user: "{{ admin_user }}"
      run_once: true
      register: test_logs

    - name: Display test results
      ansible.builtin.debug:
        msg: "Test pod logs: {{ test_logs.stdout }}"
      run_once: true

    # ===== VERIFY STORAGE LOCATION =====
    
    - name: Check if data is actually stored in /mnt/data
      ansible.builtin.shell: |
        find {{ storage_path }} -name "test-file.txt" -exec cat {} \; 2>/dev/null || echo "No test file found on this node"
      register: storage_verification

    - name: Display storage verification results
      ansible.builtin.debug:
        msg: "Node {{ inventory_hostname }}: {{ storage_verification.stdout }}"

    # ===== CLEANUP TEST RESOURCES =====
    
    - name: Delete test pod
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /var/lib/rancher/rke2/bin/kubectl delete pod test-storage-pod -n storage-test --ignore-not-found=true
      become_user: "{{ admin_user }}"
      run_once: true

    - name: Delete test PVC
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /var/lib/rancher/rke2/bin/kubectl delete pvc test-pvc -n storage-test --ignore-not-found=true
      become_user: "{{ admin_user }}"
      run_once: true

    - name: Delete test namespace
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /var/lib/rancher/rke2/bin/kubectl delete namespace storage-test --ignore-not-found=true
      become_user: "{{ admin_user }}"
      run_once: true

    # ===== FINAL VERIFICATION =====
    
    - name: Get final local-path-provisioner status
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        echo "=== LOCAL PATH STORAGE CONFIGURATION ==="
        echo
        echo "✅ Local-path-provisioner status:"
        /var/lib/rancher/rke2/bin/kubectl get pods -n local-path-storage -o wide
        echo
        echo "✅ Storage class:"
        /var/lib/rancher/rke2/bin/kubectl get storageclass local-path -o wide
        echo
        echo "✅ Current configuration:"
        /var/lib/rancher/rke2/bin/kubectl get configmap local-path-config -n local-path-storage -o yaml | grep -A 10 "config.json"
        echo
        echo "✅ Storage path configured: {{ storage_path }}"
        echo "✅ CONFIGURATION COMPLETE!"
      become_user: "{{ admin_user }}"
      run_once: true
      register: final_status

    - name: Display final configuration status
      ansible.builtin.debug:
        msg: "{{ final_status.stdout }}"
      run_once: true
