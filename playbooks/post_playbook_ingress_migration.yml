---
- name: Clean install upstream ingress-nginx and create Rancher ingress
  hosts: rke2_servers
  become: true
  gather_facts: true
  vars:
    admin_user: "{{ cluster_admin_user | default('adm4n') }}"

  tasks:
    # ===== COMPLETE CLEANUP OF ALL INGRESS RESOURCES =====
    
    - name: Remove ALL existing ingress resources (RKE2 and any others)
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        
        echo "=== REMOVING ALL INGRESS RESOURCES ==="
        
        # Remove ALL ingresses first
        /var/lib/rancher/rke2/bin/kubectl delete ingress --all --all-namespaces --ignore-not-found=true
        
        # Remove RKE2 DaemonSet (the actual controllers running on all nodes)
        /var/lib/rancher/rke2/bin/kubectl delete daemonset -n kube-system rke2-ingress-nginx-controller --ignore-not-found=true
        
        # Remove RKE2 deployments and services
        /var/lib/rancher/rke2/bin/kubectl delete deployment -n kube-system rke2-ingress-nginx-controller --ignore-not-found=true
        /var/lib/rancher/rke2/bin/kubectl delete service -n kube-system rke2-ingress-nginx-controller --ignore-not-found=true
        /var/lib/rancher/rke2/bin/kubectl delete service -n kube-system rke2-ingress-nginx-controller-admission --ignore-not-found=true
        /var/lib/rancher/rke2/bin/kubectl delete configmap -n kube-system rke2-ingress-nginx-controller --ignore-not-found=true
        /var/lib/rancher/rke2/bin/kubectl delete configmap -n kube-system chart-content-rke2-ingress-nginx --ignore-not-found=true
        /var/lib/rancher/rke2/bin/kubectl delete serviceaccount -n kube-system rke2-ingress-nginx --ignore-not-found=true
        
        # Remove ALL IngressClasses
        /var/lib/rancher/rke2/bin/kubectl delete ingressclass --all --ignore-not-found=true
        
        # Remove cluster-wide RKE2 ingress resources
        /var/lib/rancher/rke2/bin/kubectl delete clusterrole rke2-ingress-nginx --ignore-not-found=true
        /var/lib/rancher/rke2/bin/kubectl delete clusterrolebinding rke2-ingress-nginx --ignore-not-found=true
        
        # Remove ALL admission webhook configurations
        /var/lib/rancher/rke2/bin/kubectl delete validatingwebhookconfiguration --all --ignore-not-found=true
        /var/lib/rancher/rke2/bin/kubectl delete mutatingwebhookconfiguration --all --ignore-not-found=true
        
        # Remove any ingress-related jobs
        /var/lib/rancher/rke2/bin/kubectl delete job -n kube-system -l app.kubernetes.io/name=ingress-nginx --ignore-not-found=true
        
        # Remove any existing ingress-nginx namespace and resources
        /var/lib/rancher/rke2/bin/kubectl delete namespace ingress-nginx --ignore-not-found=true
        
        echo "=== CLEANUP COMPLETE ==="
      become_user: "{{ admin_user }}"

    - name: Wait for all ingress resources to be fully deleted
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        echo "Waiting for all ingress resources to be deleted..."
        
        # Wait for DaemonSet pods to terminate
        for i in {1..60}; do
          pod_count=$(/var/lib/rancher/rke2/bin/kubectl get pods --all-namespaces --selector=app.kubernetes.io/name=ingress-nginx --no-headers 2>/dev/null | wc -l)
          if [ "$pod_count" -eq 0 ]; then
            echo "✅ All ingress-nginx pods terminated"
            break
          fi
          echo "Waiting for $pod_count ingress pods to terminate... (attempt $i/60)"
          sleep 3
        done
        
        # Wait for namespace deletion
        for i in {1..30}; do
          if ! /var/lib/rancher/rke2/bin/kubectl get namespace ingress-nginx 2>/dev/null; then
            echo "✅ ingress-nginx namespace deleted"
            break
          fi
          echo "Waiting for ingress-nginx namespace to be deleted... (attempt $i/30)"
          sleep 2
        done
        
        echo "=== CLEANUP VERIFICATION ==="
        /var/lib/rancher/rke2/bin/kubectl get pods --all-namespaces | grep ingress || echo "✅ No ingress pods found"
        /var/lib/rancher/rke2/bin/kubectl get ingressclass || echo "✅ No IngressClasses found"
        /var/lib/rancher/rke2/bin/kubectl get ingress --all-namespaces || echo "✅ No ingresses found"
      become_user: "{{ admin_user }}"
      register: cleanup_verification

    # ===== INSTALL CLEAN UPSTREAM INGRESS-NGINX =====
    
    - name: Create ingress-nginx namespace
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /var/lib/rancher/rke2/bin/kubectl create namespace ingress-nginx
      become_user: "{{ admin_user }}"

    - name: Install upstream ingress-nginx using Helm
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        /usr/local/bin/helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx \
          --namespace ingress-nginx \
          --set controller.kind=DaemonSet \
          --set controller.hostNetwork=true \
          --set controller.dnsPolicy=ClusterFirstWithHostNet \
          --set controller.service.type=ClusterIP \
          --set controller.nodeSelector."kubernetes\.io/os"=linux \
          --set controller.admissionWebhooks.enabled=false \
          --set controller.config.use-forwarded-headers="true" \
          --set controller.config.compute-full-forwarded-for="true" \
          --set controller.config.use-proxy-protocol="false" \
          --wait \
          --timeout=300s
      become_user: "{{ admin_user }}"
      register: ingress_nginx_install

    - name: Wait for ingress-nginx controller to be ready
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        echo "Waiting for ingress-nginx controller to be ready..."
        /var/lib/rancher/rke2/bin/kubectl wait --namespace ingress-nginx \
          --for=condition=ready pod \
          --selector=app.kubernetes.io/component=controller \
          --timeout=300s
        echo "✅ Ingress-nginx controller is ready"
      become_user: "{{ admin_user }}"

    # ===== CREATE RANCHER INGRESS =====
    
    - name: Create Rancher ingress for https://{{ rancher_hostname }}
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        cat <<EOF | /var/lib/rancher/rke2/bin/kubectl apply -f -
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: rancher
          namespace: cattle-system
          annotations:
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/ssl-passthrough: "true"
            nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
            nginx.ingress.kubernetes.io/proxy-read-timeout: "1800"
            nginx.ingress.kubernetes.io/proxy-send-timeout: "1800"
        spec:
          ingressClassName: nginx
          rules:
          - host: {{ rancher_hostname }}
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: rancher
                    port:
                      number: 80
          tls:
          - hosts:
            - {{ rancher_hostname }}
            secretName: tls-rancher-ingress
        EOF
      become_user: "{{ admin_user }}"

    # ===== VERIFICATION =====

    - name: Get final ingress status
      ansible.builtin.shell: |
        export KUBECONFIG=/home/{{ admin_user }}/.kube/config
        echo "=== INGRESS INSTALLATION RESULTS ==="
        echo
        echo "✅ Ingress-nginx Controller Pods:"
        /var/lib/rancher/rke2/bin/kubectl get pods -n ingress-nginx -o wide
        echo
        echo "✅ Ingress-nginx Service (NodePort):"
        /var/lib/rancher/rke2/bin/kubectl get service -n ingress-nginx
        echo
        echo "✅ IngressClass:"
        /var/lib/rancher/rke2/bin/kubectl get ingressclass
        echo
        echo "✅ Rancher Ingress:"
        /var/lib/rancher/rke2/bin/kubectl get ingress -n cattle-system -o wide
        echo
        echo "=== ACCESS INFORMATION ==="
        echo "🌐 Rancher UI Access: https://{{ rancher_hostname }} (standard port 443)"
        echo "📍 Add to your hosts file: <NODE_IP> {{ rancher_hostname }}"
        echo "🔗 Available on all cluster nodes (direct port 443 binding):"
        /var/lib/rancher/rke2/bin/kubectl get nodes -o wide | awk 'NR>1 {print "   - https://" $6 " (or use {{ rancher_hostname }})"}'
        echo "🔗 HTTP port 80 will redirect to HTTPS port 443"
        echo "✅ DaemonSet deployment: ingress controller runs on ALL nodes"
        echo
        echo "✅ DEPLOYMENT COMPLETE!"
      become_user: "{{ admin_user }}"
      register: final_status
