---
- name: Provision LXC containers on Proxmox hosts (Clean - No Network Optimizations)
  hosts: proxmox_hosts
  become: true
  gather_facts: true
  vars:
    # Default map file; override with: -e lxc_map_file=playbooks/proxmox-vars/your_map.yml
    lxc_map_file: proxmox-vars/lxc_map_template.yml

  pre_tasks:
    - name: Load selected LXC map file
      ansible.builtin.include_vars:
        file: "{{ lxc_map_file }}"

    - name: Assert running on Debian (Proxmox)
      ansible.builtin.assert:
        that:
          - ansible_os_family == 'Debian'
        fail_msg: "This playbook must run against Proxmox (Debian) hosts as root."

    - name: Show LXC plan for this host
      ansible.builtin.debug:
        var: (proxmox_cluster.containers | selectattr('host', 'equalto', inventory_hostname) | list)

  tasks:
    - name: Ensure critical kernel modules are loaded (ESSENTIAL FOR K8S)
      ansible.builtin.shell: |
        set -e
        # Core networking modules
        modprobe overlay || echo "Warning: overlay module load failed"
        modprobe br_netfilter || echo "Warning: br_netfilter module load failed"
        modprobe ip_tables || echo "Warning: ip_tables module load failed"
        modprobe ip6_tables || echo "Warning: ip6_tables module load failed"
        modprobe nf_nat || echo "Warning: nf_nat module load failed"
        modprobe xt_conntrack || echo "Warning: xt_conntrack module load failed"
        modprobe nf_conntrack || echo "Warning: nf_conntrack module load failed"
        
        # Additional kernel modules needed for Kubernetes
        modprobe xt_REDIRECT || echo "Warning: xt_REDIRECT module load failed"
        modprobe xt_owner || echo "Warning: xt_owner module load failed"
        modprobe iptable_nat || echo "Warning: iptable_nat module load failed"
        modprobe iptable_filter || echo "Warning: iptable_filter module load failed"
        
        # Verify critical modules
        echo "=== KERNEL MODULE STATUS ==="
        lsmod | grep -E "(overlay|br_netfilter|ip_tables|nf_nat|xt_conntrack)" || true
        echo "=== END MODULE STATUS ==="
      args:
        executable: /bin/bash
      changed_when: false

    - name: Persist kernel modules across reboots (minimal)
      ansible.builtin.lineinfile:
        path: /etc/modules
        line: "{{ item }}"
        create: true
      loop:
        - overlay
        - ip_tables
        - ip6_tables
        - nf_nat
        - xt_conntrack
        - br_netfilter

    - name: Configure sysctl for Kubernetes networking (minimal)
      ansible.builtin.blockinfile:
        path: /etc/sysctl.conf
        marker: "# {mark} KUBERNETES_NETWORKING"
        block: |
          net.bridge.bridge-nf-call-iptables = 1
          net.bridge.bridge-nf-call-ip6tables = 1
          net.ipv4.ip_forward = 1
        create: true

    - name: Apply sysctl configuration
      ansible.builtin.shell: sysctl -p
      args:
        executable: /bin/bash
      changed_when: false

    - name: Prepare data storage for mounts (ZFS volumes and directories)
      ansible.builtin.include_tasks: utils/proxmox-mount-prep.yml
      when: item.host == inventory_hostname and (item.mounts is defined) and (mount is defined)
      loop: "{{ proxmox_cluster.containers | subelements('mounts', skip_missing=True) }}"
      loop_control:
        loop_var: item_mount
      vars:
        item: "{{ item_mount.0 }}"
        mount: "{{ item_mount.1 }}"

    - name: Build mount flags string for pct create
      when: item.host == inventory_hostname
      ansible.builtin.set_fact:
        pct_mount_flags: >-
          {%- set flags = [] -%}
          {%- if item.mounts is defined -%}
          {%- for m in item.mounts -%}
            {%- set idx = loop.index0 -%}
            {%- if m.type == 'zfs_volume' -%}
              {%- set src = '/dev/zvol/' + (m.pool | default(proxmox_cluster.storage_defaults.zfs_pool)) + '/' + m.name -%}
            {%- elif m.type == 'directory' -%}
              {%- set src = m.host_path -%}
            {%- elif m.type == 'storage' -%}
              {%- set src = None -%}
            {%- elif m.type == 'lvm_lv' -%}
              {%- set src = '/dev/' + m.vg + '/' + m.lv -%}
            {%- else -%}
              {%- set src = '' -%}
            {%- endif -%}
            {%- if m.type == 'storage' -%}
              {%- set storage = m.storage | default(proxmox_cluster.storage_defaults.rootfs.split(':')[0]) -%}
              {%- set rawsz = (m.size | string) -%}
              {%- set lower = rawsz | lower -%}
              {%- if lower.endswith('t') -%}
                {%- set size_gib = (((lower[0:-1] | float) * 1024) | round(0, 'floor')) | int -%}
              {%- elif lower.endswith('g') -%}
                {%- set size_gib = ((lower[0:-1] | float) | round(0, 'floor')) | int -%}
              {%- elif lower.endswith('m') -%}
                {%- set size_gib = ((((lower[0:-1] | float) / 1024) | round(0, 'ceil')) | int) | max(1) -%}
              {%- else -%}
                {%- set size_gib = (lower | float) | round(0, 'floor') | int -%}
              {%- endif -%}
              {%- set base = '--mp' ~ idx ~ ' ' ~ storage ~ ':' ~ (size_gib | string) ~ ',mp=' ~ m.container_path -%}
              {%- if m.options is defined and m.options|length > 0 -%}
                {%- set _ = flags.append(base ~ (m.options if m.options.startswith(',') else (',' ~ m.options))) -%}
              {%- elif m.read_only | default(false) -%}
                {%- set _ = flags.append(base ~ ',ro=1') -%}
              {%- else -%}
                {%- set _ = flags.append(base) -%}
              {%- endif -%}
            {%- elif src -%}
              {%- set base = '--mp' + idx|string + ' ' + src + ',mp=' + m.container_path -%}
              {%- if m.options is defined and m.options|length > 0 -%}
                {%- set _ = flags.append(base + (m.options if m.options.startswith(',') else (',' + m.options))) -%}
              {%- elif m.read_only | default(false) -%}
                {%- set _ = flags.append(base + ',ro=1') -%}
              {%- else -%}
                {%- set _ = flags.append(base) -%}
              {%- endif -%}
            {%- endif -%}
          {%- endfor -%}
          {%- endif -%}
          {{ flags | join(' ') }}
      loop: "{{ proxmox_cluster.containers }}"
      register: pct_mount_flags_results

    - name: Map results to host/container id
      when: item.item.host == inventory_hostname
      ansible.builtin.set_fact:
        pct_mount_flags_map: "{{ (pct_mount_flags_map | default({})) | combine({ item.item.id: (item.ansible_facts.pct_mount_flags | trim) }) }}"
      loop: "{{ pct_mount_flags_results.results }}"

    - name: Create LXC containers if missing
      when: item.host == inventory_hostname
      ansible.builtin.shell: >-
        pct create {{ item.id }} {{ proxmox_cluster.template }}
        --hostname {{ item.hostname }}
        --memory {{ item.memory }}
        --cores {{ item.cores }}
        --net0 name=eth0,bridge={{ proxmox_cluster.bridge }},firewall=1,gw={{ proxmox_cluster.gateway }},ip={{ item.ip }}{% if proxmox_cluster.vlan_tag is defined and proxmox_cluster.vlan_tag and proxmox_cluster.vlan_tag != 0 %},tag={{ proxmox_cluster.vlan_tag }}{% endif %},type=veth
        --ostype ubuntu --swap 0 --rootfs {{ item.rootfs }}
        {{ pct_mount_flags_map[item.id] | default('') }}
        --unprivileged 0
      args:
        executable: /bin/bash
        creates: "/etc/pve/nodes/{{ ansible_hostname }}/lxc/{{ item.id }}.conf"
      loop: "{{ proxmox_cluster.containers }}"

    - name: Apply comprehensive LXC security profile for Kubernetes (CRITICAL)
      when: item.host == inventory_hostname
      ansible.builtin.blockinfile:
        path: "/etc/pve/nodes/{{ ansible_hostname }}/lxc/{{ item.id }}.conf"
        marker: "# {mark} LXC_K8S_SETTINGS"
        block: |
          # === CRITICAL KUBERNETES CONFIGURATIONS ===
          lxc.apparmor.profile = unconfined
          lxc.cgroup2.devices.allow: a
          lxc.cap.drop: 
          lxc.mount.auto: proc:rw sys:rw cgroup:rw
          
          # === ESSENTIAL DEVICE ACCESS ===
          lxc.mount.entry: /dev/console dev/console none bind,optional,create=file
          lxc.mount.entry: /dev/full dev/full none bind,optional,create=file
          lxc.mount.entry: /dev/null dev/null none bind,optional,create=file
          lxc.mount.entry: /dev/random dev/random none bind,optional,create=file
          lxc.mount.entry: /dev/tty dev/tty none bind,optional,create=file
          lxc.mount.entry: /dev/urandom dev/urandom none bind,optional,create=file
          lxc.mount.entry: /dev/zero dev/zero none bind,optional,create=file
          
          # === KUBERNETES REQUIREMENTS ===
          lxc.mount.entry: /dev/kmsg dev/kmsg none bind,optional,create=file
          lxc.mount.entry: /sys/kernel/security sys/kernel/security none bind,optional
          lxc.mount.entry: /sys/fs/fuse/connections sys/fs/fuse/connections none bind,optional
          
          # === CONTAINER RUNTIME SUPPORT ===
          lxc.mount.entry: /dev/fuse dev/fuse none bind,optional,create=file
          lxc.mount.entry: /proc/sys/kernel/keys proc/sys/kernel/keys none bind,optional
          
          # === GPU PASSTHROUGH (NVIDIA) ===
          lxc.mount.entry: /dev/dri dev/dri none bind,optional,create=dir
          lxc.mount.entry: /dev/nvidia0 dev/nvidia0 none bind,optional,create=file
          lxc.mount.entry: /dev/nvidia1 dev/nvidia1 none bind,optional,create=file
          lxc.mount.entry: /dev/nvidia-uvm dev/nvidia-uvm none bind,optional,create=file
          lxc.mount.entry: /dev/nvidia-uvm-tools dev/nvidia-uvm-tools none bind,optional,create=file
          lxc.mount.entry: /dev/nvidia-modeset dev/nvidia-modeset none bind,optional,create=file
          lxc.mount.entry: /dev/nvidiactl dev/nvidiactl none bind,optional,create=file
          lxc.mount.entry: /dev/nvidia-caps dev/nvidia-caps none bind,optional,create=dir
          
          # === SECURITY AND LIMITS ===
          lxc.prlimit.memlock: unlimited
          lxc.prlimit.nofile: 1048576
          lxc.prlimit.nproc: unlimited
      loop: "{{ proxmox_cluster.containers }}"

    - name: Start LXC containers
      when: item.host == inventory_hostname
      ansible.builtin.shell: pct start {{ item.id }}
      args:
        executable: /bin/bash
      register: start_container_result
      changed_when: start_container_result.rc == 0
      failed_when: start_container_result.rc not in [0, 133]  # 133 = already running
      loop: "{{ proxmox_cluster.containers }}"

    - name: Wait for containers to be fully started
      when: item.host == inventory_hostname
      ansible.builtin.shell: |
        for i in {1..30}; do
          if pct exec {{ item.id }} -- test -f /proc/version; then
            echo "Container {{ item.id }} is ready"
            exit 0
          fi
          echo "Waiting for container {{ item.id }} to be ready... ($i/30)"
          sleep 3
        done
        echo "Container {{ item.id }} failed to start properly"
        exit 1
      args:
        executable: /bin/bash
      loop: "{{ proxmox_cluster.containers }}"

    # ===== MINIMAL POST-CREATION CONTAINER CONFIGURATION =====
    
    - name: Disable swap in containers
      when: item.host == inventory_hostname
      ansible.builtin.shell: |
        pct exec {{ item.id }} -- swapoff -a
        pct exec {{ item.id }} -- sed -i '/swap/d' /etc/fstab
        echo "Swap disabled for container {{ item.id }}"
      args:
        executable: /bin/bash
      loop: "{{ proxmox_cluster.containers }}"

    - name: Update apt cache in containers
      when: item.host == inventory_hostname
      ansible.builtin.shell: |
        pct exec {{ item.id }} -- apt update
      args:
        executable: /bin/bash
      loop: "{{ proxmox_cluster.containers }}"

    - name: Install essential packages only
      when: item.host == inventory_hostname
      ansible.builtin.shell: |
        pct exec {{ item.id }} -- apt install -y \
          curl wget git vim sudo \
          python3 python3-pip \
          build-essential ca-certificates \
          openssh-server
        echo "Essential packages installed for container {{ item.id }}"
      args:
        executable: /bin/bash
      loop: "{{ proxmox_cluster.containers }}"

    - name: Install Ansible (minimal)
      when: item.host == inventory_hostname
      ansible.builtin.shell: |
        pct exec {{ item.id }} -- apt install -y software-properties-common
        pct exec {{ item.id }} -- add-apt-repository --yes --update ppa:ansible/ansible
        pct exec {{ item.id }} -- apt install -y ansible-core python3-paramiko sshpass
        echo "Ansible installed for container {{ item.id }}"
      args:
        executable: /bin/bash
      loop: "{{ proxmox_cluster.containers }}"

    - name: Configure basic locale and timezone
      when: item.host == inventory_hostname
      ansible.builtin.shell: |
        pct exec {{ item.id }} -- locale-gen en_US.UTF-8
        pct exec {{ item.id }} -- timedatectl set-timezone UTC
        echo "Locale configured for container {{ item.id }}"
      args:
        executable: /bin/bash
      loop: "{{ proxmox_cluster.containers }}"

    - name: Ensure administrative SSH user exists
      when: item.host == inventory_hostname
      vars:
        user_name: "{{ item.ssh_user | default(proxmox_cluster.ssh.username | default('adm4n')) }}"
        user_password: "{{ item.ssh_password | default(proxmox_cluster.ssh.password | default('CHANGE_THIS_PASSWORD')) }}"
      ansible.builtin.shell: |
        pct exec {{ item.id }} -- bash -c 'id -u {{ user_name }} >/dev/null 2>&1 || adduser --disabled-password --gecos "" {{ user_name }}'
        pct exec {{ item.id }} -- bash -c 'echo "{{ user_name }}:{{ user_password }}" | chpasswd'
        pct exec {{ item.id }} -- bash -c 'usermod -aG sudo {{ user_name }}'
        pct exec {{ item.id }} -- bash -c 'echo "{{ user_name }} ALL=(ALL) NOPASSWD:ALL" | EDITOR="tee" visudo -f /etc/sudoers.d/{{ user_name }}'
        pct exec {{ item.id }} -- bash -c 'mkdir -p /home/{{ user_name }}/.ssh && chmod 700 /home/{{ user_name }}/.ssh && chown {{ user_name }}:{{ user_name }} /home/{{ user_name }}/.ssh'
        echo "SSH user {{ user_name }} configured for container {{ item.id }}"
      args:
        executable: /bin/bash
      loop: "{{ proxmox_cluster.containers }}"

    - name: Show container status
      when: item.host == inventory_hostname
      ansible.builtin.shell: |
        pct status {{ item.id }}
      args:
        executable: /bin/bash
      register: pct_status_out
      changed_when: false
      loop: "{{ proxmox_cluster.containers }}"

    - name: Print status summaries
      ansible.builtin.debug:
        msg: "Container {{ item.item.id }} -> {{ item.stdout | default('') }}"
      loop: "{{ pct_status_out.results | default([]) }}"